{
	"info": {
		"_postman_id": "ayursetu-user-service",
		"name": "AyurSetu User Service",
		"description": "Complete API collection for AyurSetu User Service with authentication, CRUD operations, and password reset functionality",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    console.log('User registered successfully:', response);",
									"    pm.test('User registered successfully', function () {",
									"        pm.expect(response).to.have.property('id');",
									"        pm.expect(response).to.have.property('name');",
									"        pm.expect(response).to.have.property('email');",
									"        pm.expect(response).to.have.property('role');",
									"    });",
									"} else {",
									"    pm.test('Registration failed', function () {",
									"        pm.expect.fail('Registration failed with status: ' + pm.response.code);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"password123\",\n    \"role\": \"PATIENT\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('Login successful:', response);",
									"    ",
									"    // Store the token in environment variable",
									"    if (response.token) {",
									"        pm.environment.set('auth_token', response.token);",
									"        console.log('Token stored in environment');",
									"    }",
									"    ",
									"    pm.test('Login successful', function () {",
									"        pm.expect(response).to.have.property('token');",
									"        pm.expect(response.token).to.be.a('string');",
									"        pm.expect(response.token.length).to.be.greaterThan(0);",
									"    });",
									"} else {",
									"    pm.test('Login failed', function () {",
									"        pm.expect.fail('Login failed with status: ' + pm.response.code);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user registration and login"
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get User by Email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if token exists",
									"const token = pm.environment.get('auth_token');",
									"if (!token) {",
									"    console.warn('No auth token found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('User retrieved successfully:', response);",
									"    pm.test('User retrieved successfully', function () {",
									"        pm.expect(response).to.have.property('id');",
									"        pm.expect(response).to.have.property('name');",
									"        pm.expect(response).to.have.property('email');",
									"        pm.expect(response).to.have.property('role');",
									"    });",
									"} else {",
									"    pm.test('Failed to retrieve user', function () {",
									"        pm.expect.fail('Failed with status: ' + pm.response.code);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/john.doe@example.com",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"john.doe@example.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if token exists",
									"const token = pm.environment.get('auth_token');",
									"if (!token) {",
									"    console.warn('No auth token found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('User updated successfully:', response);",
									"    pm.test('User updated successfully', function () {",
									"        pm.expect(response).to.have.property('id');",
									"        pm.expect(response).to.have.property('name');",
									"        pm.expect(response).to.have.property('email');",
									"        pm.expect(response).to.have.property('role');",
									"    });",
									"} else {",
									"    pm.test('Failed to update user', function () {",
									"        pm.expect.fail('Failed with status: ' + pm.response.code);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Updated Doe\",\n    \"password\": \"newpassword123\",\n    \"role\": \"PATIENT\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/john.doe@example.com",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"john.doe@example.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if token exists",
									"const token = pm.environment.get('auth_token');",
									"if (!token) {",
									"    console.warn('No auth token found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.text();",
									"    console.log('User deleted successfully:', response);",
									"    pm.test('User deleted successfully', function () {",
									"        pm.expect(response).to.include('deleted successfully');",
									"    });",
									"} else {",
									"    pm.test('Failed to delete user', function () {",
									"        pm.expect.fail('Failed with status: ' + pm.response.code);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/john.doe@example.com",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"john.doe@example.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users (Admin Only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if token exists",
									"const token = pm.environment.get('auth_token');",
									"if (!token) {",
									"    console.warn('No auth token found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('Users retrieved successfully:', response);",
									"    pm.test('Users retrieved successfully', function () {",
									"        pm.expect(response).to.be.an('array');",
									"        if (response.length > 0) {",
									"            pm.expect(response[0]).to.have.property('id');",
									"            pm.expect(response[0]).to.have.property('name');",
									"            pm.expect(response[0]).to.have.property('email');",
									"            pm.expect(response[0]).to.have.property('role');",
									"        }",
									"    });",
									"} else {",
									"    pm.test('Failed to retrieve users', function () {",
									"        pm.expect.fail('Failed with status: ' + pm.response.code);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"all"
							]
						}
					},
					"response": []
				}
			],
			"description": "User management endpoints for CRUD operations"
		},
		{
			"name": "Password Reset",
			"item": [
				{
					"name": "Forgot Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.text();",
									"    console.log('Password reset email sent:', response);",
									"    pm.test('Password reset email sent successfully', function () {",
									"        pm.expect(response).to.include('sent to your email');",
									"    });",
									"    ",
									"    // Note: In a real scenario, you would extract the token from the email",
									"    // For testing purposes, you can check the console logs in your application",
									"    console.log('Check your application logs for the reset token');",
									"} else {",
									"    pm.test('Failed to send password reset email', function () {",
									"        pm.expect.fail('Failed with status: ' + pm.response.code);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/forgot-password?email=john.doe@example.com",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"forgot-password"
							],
							"query": [
								{
									"key": "email",
									"value": "john.doe@example.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password with Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.text();",
									"    console.log('Password reset successful:', response);",
									"    pm.test('Password reset successful', function () {",
									"        pm.expect(response).to.include('reset successfully');",
									"    });",
									"} else {",
									"    pm.test('Failed to reset password', function () {",
									"        pm.expect.fail('Failed with status: ' + pm.response.code);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/reset-password-with-token?token={{reset_token}}&newPassword=newpassword123",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"reset-password-with-token"
							],
							"query": [
								{
									"key": "token",
									"value": "{{reset_token}}"
								},
								{
									"key": "newPassword",
									"value": "newpassword123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password (Legacy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.text();",
									"    console.log('Password reset successful:', response);",
									"    pm.test('Password reset successful', function () {",
									"        pm.expect(response).to.include('reset successfully');",
									"    });",
									"} else {",
									"    pm.test('Failed to reset password', function () {",
									"        pm.expect.fail('Failed with status: ' + pm.response.code);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/reset-password?email=john.doe@example.com&newPassword=newpassword123",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"reset-password"
							],
							"query": [
								{
									"key": "email",
									"value": "john.doe@example.com"
								},
								{
									"key": "newPassword",
									"value": "newpassword123"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Password reset functionality endpoints"
		},
		{
			"name": "Test Data Setup",
			"item": [
				{
					"name": "Create Test Users",
					"item": [
						{
							"name": "Create Patient User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201) {",
											"    console.log('Patient user created successfully');",
											"    pm.environment.set('patient_email', 'patient@example.com');",
											"} else {",
											"    console.log('Patient user creation failed or user already exists');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test Patient\",\n    \"email\": \"patient@example.com\",\n    \"password\": \"password123\",\n    \"role\": \"PATIENT\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/users/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Doctor User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201) {",
											"    console.log('Doctor user created successfully');",
											"    pm.environment.set('doctor_email', 'doctor@example.com');",
											"} else {",
											"    console.log('Doctor user creation failed or user already exists');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dr. Smith\",\n    \"email\": \"doctor@example.com\",\n    \"password\": \"password123\",\n    \"role\": \"DOCTOR\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/users/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Admin User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201) {",
											"    console.log('Admin user created successfully');",
											"    pm.environment.set('admin_email', 'admin@example.com');",
											"} else {",
											"    console.log('Admin user creation failed or user already exists');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Admin User\",\n    \"email\": \"admin@example.com\",\n    \"password\": \"password123\",\n    \"role\": \"ADMIN\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/users/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"description": "Create test users with different roles for testing"
				},
				{
					"name": "Login Test Users",
					"item": [
						{
							"name": "Login as Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    const response = pm.response.json();",
											"    if (response.token) {",
											"        pm.environment.set('patient_token', response.token);",
											"        console.log('Patient token stored');",
											"    }",
											"} else {",
											"    console.log('Patient login failed');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"patient@example.com\",\n    \"password\": \"password123\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/users/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login as Doctor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    const response = pm.response.json();",
											"    if (response.token) {",
											"        pm.environment.set('doctor_token', response.token);",
											"        console.log('Doctor token stored');",
											"    }",
											"} else {",
											"    console.log('Doctor login failed');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"doctor@example.com\",\n    \"password\": \"password123\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/users/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login as Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    const response = pm.response.json();",
											"    if (response.token) {",
											"        pm.environment.set('admin_token', response.token);",
											"        console.log('Admin token stored');",
											"    }",
											"} else {",
											"    console.log('Admin login failed');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"password123\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/users/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"description": "Login as different user types and store their tokens"
				}
			],
			"description": "Setup test data and user tokens for comprehensive testing"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Request URL:', pm.request.url.toString());",
					"console.log('Request Method:', pm.request.method);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"console.log('Response Status:', pm.response.status);",
					"console.log('Response Time:', pm.response.responseTime + 'ms');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8081",
			"type": "string"
		}
	]
} 