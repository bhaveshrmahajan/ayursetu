version: '3.8'

services:
  # Infrastructure Services
  mysql:
    image: mysql:8.0
    container_name: ayursetu-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root1234
      MYSQL_DATABASE: ayursetu
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ayursetu-network

  redis:
    image: redis:7-alpine
    container_name: ayursetu-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ayursetu-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ayursetu-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - ayursetu-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ayursetu-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - ayursetu-network

  # Microservices
  user-service:
    build:
      context: ./User-Service
      dockerfile: Dockerfile
    container_name: ayursetu-user-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/userdb
      SPRING_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - mysql
      - redis
      - kafka
    networks:
      - ayursetu-network

  doctor-service:
    build:
      context: ./Doctor-Service
      dockerfile: Dockerfile
    container_name: ayursetu-doctor-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/doctordb
      SPRING_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - mysql
      - redis
      - kafka
    networks:
      - ayursetu-network

  pharmacy-service:
    build:
      context: ./Pharmacy-Service
      dockerfile: Dockerfile
    container_name: ayursetu-pharmacy-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/pharmacydb
      SPRING_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - mysql
      - redis
      - kafka
    networks:
      - ayursetu-network

  appointment-service:
    build:
      context: ./Appointment-Service
      dockerfile: Dockerfile
    container_name: ayursetu-appointment-service
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/appointmentdb
      SPRING_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - mysql
      - redis
      - kafka
    networks:
      - ayursetu-network

  payment-service:
    build:
      context: ./Payment-Service
      dockerfile: Dockerfile
    container_name: ayursetu-payment-service
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/paymentdb
      SPRING_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - mysql
      - redis
      - kafka
    networks:
      - ayursetu-network

  api-gateway:
    build:
      context: ./API-Gateway
      dockerfile: Dockerfile
    container_name: ayursetu-api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_REDIS_HOST: redis
      USER_SERVICE_URL: http://user-service:8081
      DOCTOR_SERVICE_URL: http://doctor-service:8082
      PHARMACY_SERVICE_URL: http://pharmacy-service:8083
      APPOINTMENT_SERVICE_URL: http://appointment-service:8084
      PAYMENT_SERVICE_URL: http://payment-service:8085
    depends_on:
      - user-service
      - doctor-service
      - pharmacy-service
      - appointment-service
      - payment-service
      - redis
    networks:
      - ayursetu-network

  # Frontend (if you have React frontend)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ayursetu-frontend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8080
    depends_on:
      - api-gateway
    networks:
      - ayursetu-network

volumes:
  mysql_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:

networks:
  ayursetu-network:
    driver: bridge 